[
    {
        "label": "*",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "importPath": "convert_abstract",
        "description": "convert_abstract",
        "isExtraImport": true,
        "detail": "convert_abstract",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "googlemaps",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "googlemaps",
        "description": "googlemaps",
        "detail": "googlemaps",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "NewsDataset",
        "importPath": "app.api.news.model.news_dataset",
        "description": "app.api.news.model.news_dataset",
        "isExtraImport": true,
        "detail": "app.api.news.model.news_dataset",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "NewsService",
        "importPath": "app.api.news.service.news_service",
        "description": "app.api.news.service.news_service",
        "isExtraImport": true,
        "detail": "app.api.news.service.news_service",
        "documentation": {}
    },
    {
        "label": "NewsDataset",
        "importPath": "news_dataset",
        "description": "news_dataset",
        "isExtraImport": true,
        "detail": "news_dataset",
        "documentation": {}
    },
    {
        "label": "NewsDataset",
        "importPath": "news_dataset",
        "description": "news_dataset",
        "isExtraImport": true,
        "detail": "news_dataset",
        "documentation": {}
    },
    {
        "label": "ScrapBugs",
        "importPath": "app.api.demo.crawling",
        "description": "app.api.demo.crawling",
        "isExtraImport": true,
        "detail": "app.api.demo.crawling",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.news.web.news_router",
        "description": "app.api.news.web.news_router",
        "isExtraImport": true,
        "detail": "app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.main_router",
        "description": "app.main_router",
        "isExtraImport": true,
        "detail": "app.main_router",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_abstract",
        "description": "back_python.app.api.common.convert_abstract",
        "peekOfCode": "class EditorBase(metaclass=ABCMeta):\n    @abstractmethod\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this = this.dropna()\n        return this\nclass PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):",
        "detail": "back_python.app.api.common.convert_abstract",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_abstract",
        "description": "back_python.app.api.common.convert_abstract",
        "peekOfCode": "class PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):",
        "detail": "back_python.app.api.common.convert_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_abstract",
        "description": "back_python.app.api.common.convert_abstract",
        "peekOfCode": "class ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):\n        pass\n    @abstractmethod\n    def json(self):\n        pass",
        "detail": "back_python.app.api.common.convert_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_abstract",
        "description": "back_python.app.api.common.convert_abstract",
        "peekOfCode": "class ScraperBase(metaclass=ABCMeta):\n    @abstractmethod\n    def driver(self):\n        pass",
        "detail": "back_python.app.api.common.convert_abstract",
        "documentation": {}
    },
    {
        "label": "Editor",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_util",
        "description": "back_python.app.api.common.convert_util",
        "peekOfCode": "class Editor(EditorBase):\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this.dropna(axis=0, inplace=True)\nclass Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')",
        "detail": "back_python.app.api.common.convert_util",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_util",
        "description": "back_python.app.api.common.convert_util",
        "peekOfCode": "class Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')\n        ic('*'*100)\nclass Reader(ReaderBase):\n    def __init__(self):",
        "detail": "back_python.app.api.common.convert_util",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_util",
        "description": "back_python.app.api.common.convert_util",
        "peekOfCode": "class Reader(ReaderBase):\n    def __init__(self):\n        pass\n    def csv(self,file) -> object:\n        return pd.read_csv(f'{file}',encoding='UTF-8', thousands=',')\n    def excel(self,file,header,usecols) -> object:\n        return pd.read_excel(f'{file}', header=header, usecols=usecols)\n    def json(self,file) -> object:\n        return json.load(open(f'{file}.json',encoding='UTF-8'))\n    def gmaps(self, api_key:str) -> object:",
        "detail": "back_python.app.api.common.convert_util",
        "documentation": {}
    },
    {
        "label": "Scraper",
        "kind": 6,
        "importPath": "back_python.app.api.common.convert_util",
        "description": "back_python.app.api.common.convert_util",
        "peekOfCode": "class Scraper(ScraperBase):\n    def __init__(self):\n        pass\n    def driver(self, driver, url, selector, data) -> None:\n        return webdriver.Chrome('')\n    def auto_login(self, driver, url, selector, data) -> None:\n        driver.get(url)\n        driver.find_element_by_css_selector(selector).send_keys(data)\n        driver.find_element_by_css_selector(selector).submit()",
        "detail": "back_python.app.api.common.convert_util",
        "documentation": {}
    },
    {
        "label": "ScrapBugs",
        "kind": 6,
        "importPath": "back_python.app.api.demo.crawling",
        "description": "back_python.app.api.demo.crawling",
        "peekOfCode": "class ScrapBugs(object):\n    def __init__(self) :\n        self.dname = 'C:\\\\Users\\\\bitcamp\\\\Gisa\\\\lixgit\\\\back_python\\\\app\\\\news\\\\data'\n    def scrap(self) -> {}:\n        print('벅스 뮤직 사이트에서 데이터를 수집합니다.')\n        url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        html_doc = urlopen(url)\n        soup = BeautifulSoup(html_doc, 'lxml')\n        list1 = self.find_music(soup,'title')\n        list2 = self.find_music(soup,'artist')",
        "detail": "back_python.app.api.demo.crawling",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back_python.app.api.demo.crawling",
        "description": "back_python.app.api.demo.crawling",
        "peekOfCode": "router = APIRouter()\nclass ScrapBugs(object):\n    def __init__(self) :\n        self.dname = 'C:\\\\Users\\\\bitcamp\\\\Gisa\\\\lixgit\\\\back_python\\\\app\\\\news\\\\data'\n    def scrap(self) -> {}:\n        print('벅스 뮤직 사이트에서 데이터를 수집합니다.')\n        url = 'https://music.bugs.co.kr/chart/track/realtime/total?'\n        html_doc = urlopen(url)\n        soup = BeautifulSoup(html_doc, 'lxml')\n        list1 = self.find_music(soup,'title')",
        "detail": "back_python.app.api.demo.crawling",
        "documentation": {}
    },
    {
        "label": "NewsDataset",
        "kind": 6,
        "importPath": "back_python.app.api.news.model.news_dataset",
        "description": "back_python.app.api.news.model.news_dataset",
        "peekOfCode": "class NewsDataset:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _id : str = ''\n    _label : str = ''\n    _title : str = ''\n    _keyword : str = ''\n    @property\n    def dname(self) -> str : return self._dname",
        "detail": "back_python.app.api.news.model.news_dataset",
        "documentation": {}
    },
    {
        "label": "NewsModel",
        "kind": 6,
        "importPath": "back_python.app.api.news.model.news_model",
        "description": "back_python.app.api.news.model.news_model",
        "peekOfCode": "class NewsModel:\n    def __init__(self) -> None:\n        self.ds = NewsDataset()\n        # this = self.ds\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        return pd.read_csv(f'{this.dname}{fname}',index_col=0)    \n    def new_dataframe_no_index(self, fname: str) -> object:\n        this = self.ds\n        return pd.read_csv(f'{this.dname}{fname}')",
        "detail": "back_python.app.api.news.model.news_model",
        "documentation": {}
    },
    {
        "label": "NewsService",
        "kind": 6,
        "importPath": "back_python.app.api.news.service.news_service",
        "description": "back_python.app.api.news.service.news_service",
        "peekOfCode": "class NewsService:\n    # dataset = NewsDataset()\n    def __init__(self) :\n        pass\n        # self.data = self.dataset\n    def preprocess(self) :\n        print(f'전처리 시작')\n    def title(self) :\n        ic(f'제목 추출 시작')\nif __name__ == '__main__':",
        "detail": "back_python.app.api.news.service.news_service",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "back_python.app.api.news.web.news_router",
        "description": "back_python.app.api.news.web.news_router",
        "peekOfCode": "class Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.get(\"/title\")\ndef title(req:Request):\n    print(\"news title\")\n    service.title()\n    return {\"answer\": \"news~! \"}",
        "detail": "back_python.app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "back_python.app.api.news.web.news_router",
        "description": "back_python.app.api.news.web.news_router",
        "peekOfCode": "class Response(BaseModel):\n    answer :str\n@router.get(\"/title\")\ndef title(req:Request):\n    print(\"news title\")\n    service.title()\n    return {\"answer\": \"news~! \"}",
        "detail": "back_python.app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 2,
        "importPath": "back_python.app.api.news.web.news_router",
        "description": "back_python.app.api.news.web.news_router",
        "peekOfCode": "def title(req:Request):\n    print(\"news title\")\n    service.title()\n    return {\"answer\": \"news~! \"}",
        "detail": "back_python.app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back_python.app.api.news.web.news_router",
        "description": "back_python.app.api.news.web.news_router",
        "peekOfCode": "router = APIRouter()\nservice = NewsService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.get(\"/title\")\ndef title(req:Request):\n    print(\"news title\")\n    service.title()",
        "detail": "back_python.app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "back_python.app.api.news.web.news_router",
        "description": "back_python.app.api.news.web.news_router",
        "peekOfCode": "service = NewsService()\nclass Request(BaseModel):\n    question :str\nclass Response(BaseModel):\n    answer :str\n@router.get(\"/title\")\ndef title(req:Request):\n    print(\"news title\")\n    service.title()\n    return {\"answer\": \"news~! \"}",
        "detail": "back_python.app.api.news.web.news_router",
        "documentation": {}
    },
    {
        "label": "EditorBase",
        "kind": 6,
        "importPath": "back_python.app.src.convert_abstract",
        "description": "back_python.app.src.convert_abstract",
        "peekOfCode": "class EditorBase(metaclass=ABCMeta):\n    @abstractmethod\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this = this.dropna()\n        return this\nclass PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):",
        "detail": "back_python.app.src.convert_abstract",
        "documentation": {}
    },
    {
        "label": "PrinterBase",
        "kind": 6,
        "importPath": "back_python.app.src.convert_abstract",
        "description": "back_python.app.src.convert_abstract",
        "peekOfCode": "class PrinterBase(metaclass=ABCMeta):\n    @abstractmethod\n    def print(self):\n        pass\nclass ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):",
        "detail": "back_python.app.src.convert_abstract",
        "documentation": {}
    },
    {
        "label": "ReaderBase",
        "kind": 6,
        "importPath": "back_python.app.src.convert_abstract",
        "description": "back_python.app.src.convert_abstract",
        "peekOfCode": "class ReaderBase(metaclass=ABCMeta):\n    @abstractmethod\n    def csv(self):\n        pass\n    @abstractmethod\n    def excel(self):\n        pass\n    @abstractmethod\n    def json(self):\n        pass",
        "detail": "back_python.app.src.convert_abstract",
        "documentation": {}
    },
    {
        "label": "ScraperBase",
        "kind": 6,
        "importPath": "back_python.app.src.convert_abstract",
        "description": "back_python.app.src.convert_abstract",
        "peekOfCode": "class ScraperBase(metaclass=ABCMeta):\n    @abstractmethod\n    def driver(self):\n        pass",
        "detail": "back_python.app.src.convert_abstract",
        "documentation": {}
    },
    {
        "label": "Editor",
        "kind": 6,
        "importPath": "back_python.app.src.convert_util",
        "description": "back_python.app.src.convert_util",
        "peekOfCode": "class Editor(EditorBase):\n    def dropna(self,this:pd.DataFrame)->pd.DataFrame:\n        this.dropna(axis=0, inplace=True)\nclass Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')",
        "detail": "back_python.app.src.convert_util",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "back_python.app.src.convert_util",
        "description": "back_python.app.src.convert_util",
        "peekOfCode": "class Printer(PrinterBase):\n    def dframe(self, this:pd.DataFrame) -> None:\n        ic('*'*100)\n        ic(f'타입 : {type(this)}')\n        ic(f'column : {this.columns}')\n        ic(f'top 1 col : {this.head(1)}')\n        ic(f'null count : {this.isnul().sum()} 개')\n        ic('*'*100)\nclass Reader(ReaderBase):\n    def __init__(self):",
        "detail": "back_python.app.src.convert_util",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "back_python.app.src.convert_util",
        "description": "back_python.app.src.convert_util",
        "peekOfCode": "class Reader(ReaderBase):\n    def __init__(self):\n        pass\n    def csv(self,file) -> object:\n        return pd.read_csv(f'{file}',encoding='UTF-8', thousands=',')\n    def excel(self,file,header,usecols) -> object:\n        return pd.read_excel(f'{file}', header=header, usecols=usecols)\n    def json(self,file) -> object:\n        return json.load(open(f'{file}.json',encoding='UTF-8'))\n    def gmaps(self, api_key:str) -> object:",
        "detail": "back_python.app.src.convert_util",
        "documentation": {}
    },
    {
        "label": "Scraper",
        "kind": 6,
        "importPath": "back_python.app.src.convert_util",
        "description": "back_python.app.src.convert_util",
        "peekOfCode": "class Scraper(ScraperBase):\n    def __init__(self):\n        pass\n    def driver(self, driver, url, selector, data) -> None:\n        return webdriver.Chrome('')\n    def auto_login(self, driver, url, selector, data) -> None:\n        driver.get(url)\n        driver.find_element_by_css_selector(selector).send_keys(data)\n        driver.find_element_by_css_selector(selector).submit()",
        "detail": "back_python.app.src.convert_util",
        "documentation": {}
    },
    {
        "label": "NewsDataset",
        "kind": 6,
        "importPath": "back_python.app.src.news_dataset",
        "description": "back_python.app.src.news_dataset",
        "peekOfCode": "class NewsDataset:\n    _dname : str = ''\n    _sname : str = ''\n    _fname : str = ''\n    _id : str = ''\n    _label : str = ''\n    _title : str = ''\n    _keyword : str = ''\n    @property\n    def dname(self) -> str : return self._dname",
        "detail": "back_python.app.src.news_dataset",
        "documentation": {}
    },
    {
        "label": "NewsModel",
        "kind": 6,
        "importPath": "back_python.app.src.news_model",
        "description": "back_python.app.src.news_model",
        "peekOfCode": "class NewsModel:\n    def __init__(self) -> None:\n        self.ds = NewsDataset()\n        # this = self.ds\n    def new_dataframe_with_index(self, fname: pd.DataFrame) -> pd.DataFrame:\n        this = self.ds\n        return pd.read_csv(f'{this.dname}{fname}',index_col=0)    \n    def new_dataframe_no_index(self, fname: str) -> object:\n        this = self.ds\n        return pd.read_csv(f'{this.dname}{fname}')",
        "detail": "back_python.app.src.news_model",
        "documentation": {}
    },
    {
        "label": "NewsService",
        "kind": 6,
        "importPath": "back_python.app.src.news_service",
        "description": "back_python.app.src.news_service",
        "peekOfCode": "class NewsService:\n    dataset = NewsDataset()\n    def __init__(self) :\n        pass\n        self.data = self.dataset\n    def preprocess(self) :\n        print(f'전처리 시작')\n    def title(self) :\n        ic(f'제목 추출 시작')\nif __name__ == '__main__':",
        "detail": "back_python.app.src.news_service",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "back_python.app.main_router",
        "description": "back_python.app.main_router",
        "peekOfCode": "def read_root(self):\n    # ScrapBugs.scrap()\n    ic(\"crawling\")\n    return {\"Hello\": \"crawling\"}",
        "detail": "back_python.app.main_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back_python.app.main_router",
        "description": "back_python.app.main_router",
        "peekOfCode": "router = APIRouter()\nrouter.include_router(title, prefix=\"/news\")\n@router.get(\"/crawling\")\ndef read_root(self):\n    # ScrapBugs.scrap()\n    ic(\"crawling\")\n    return {\"Hello\": \"crawling\"}",
        "detail": "back_python.app.main_router",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "back_python.main",
        "description": "back_python.main",
        "peekOfCode": "def read_root():\n    return {\"Hello\": \"World\"}\nif __name__ == \"__main__\":\n    uvicorn.run(router, host=\"localhost\", port=8000)",
        "detail": "back_python.main",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back_python.main",
        "description": "back_python.main",
        "peekOfCode": "router = FastAPI()\nrouter.include_router(router, prefix=\"/api\")\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\nif __name__ == \"__main__\":\n    uvicorn.run(router, host=\"localhost\", port=8000)",
        "detail": "back_python.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "front.node_modules.flatted.python.flatted",
        "description": "front.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "front.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "front.node_modules.flatted.python.flatted",
        "description": "front.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "front.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "front.node_modules.flatted.python.flatted",
        "description": "front.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "front.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "front.node_modules.flatted.python.flatted",
        "description": "front.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "front.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "front.node_modules.flatted.python.test",
        "description": "front.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "front.node_modules.flatted.python.test",
        "documentation": {}
    }
]